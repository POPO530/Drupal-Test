<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 * カスタムツールバーを定義する関数。
 *
 * @return array
 *   ツールバー項目の配列を返します。
 */
function test_toolbar() {
  // 利用可能なルートを取得
  $modules = _test_toolbar_routes();

  // 各モジュールに対してリンクを構築
  $links = [];
  foreach ($modules as $module => $route) {
    // モジュールが存在する場合
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      // モジュール情報を取得
      $info = \Drupal::service('extension.list.module')->getExtensionInfo($module);
      if (!empty($info)) {
        // リンク配列に情報を追加
        $links[$module] = [
          'title' => Html::escape($info['name']),
          'url' => Url::fromRoute($route),
          'attributes' => [
            'class' => [Html::getClass($module)],
            'title' => Html::escape($info['description']),
          ],
        ];
      }
    }
  }

  // 追加のリンクを定義
  $links['test.email_form'] = [
    'title' => t('Email Page'),
    'url' => Url::fromRoute('test.email_form'),
  ];

  $links['helloworld.hello'] = [
    'title' => t('Hello Page'),
    'url' => Url::fromRoute('helloworld.hello'),
  ];

  $links['helloworld.kuji'] = [
    'title' => t('Kuji Page'),
    'url' => Url::fromRoute('helloworld.kuji'),
  ];

  $links['test.survey_form'] = [
    'title' => t('Survey Page'),
    'url' => Url::fromRoute('test.survey_form'),
  ];

  $links['test.survey_results'] = [
    'title' => t('Results Page'),
    'url' => Url::fromRoute('test.survey_results'),
  ];

  // ツールバー項目を定義
  $items['test_toolbar'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Test Toolbar'),
      '#url' => Url::fromRoute('<front>'),
      '#attributes' => [
        'title' => t('Test Toolbar'),
      ],
    ],
    'tray' => [
      '#heading' => t('Test Toolbar'),
      'shortcuts' => [
        '#theme' => 'links__toolbar_test',
        '#links' => $links,
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#weight' => 99,
  ];

  return $items;
}

/**
 * 利用可能なルートを定義する補助関数。
 *
 * @return array
 *   モジュール名とルート名の対応関係を返します。
 */
function _test_toolbar_routes() {
  return [
    'test.email_form' => 'test.email_form',
    'helloworld.hello' => 'helloworld.hello',
    'helloworld.kuji' => 'helloworld.kuji',
    'test.survey_form' => 'test.survey_form',
    'test.survey_results' => 'test.survey_results',
  ];
}

/**
 * Drupalのhook_mail()を実装する例。
 *
 * @param $key
 *   メールの識別子。
 * @param $message
 *   メールの構成要素を含む配列。
 * @param $params
 *   メール送信時に追加されるパラメータ。
 */
function test_mail($key, &$message, $params) {
    $options = [
      'langcode' => $message['langcode'],
    ];

    $params = (object) $params;

    switch ($key) {
        case 'contact_message':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = !empty($params->subject) ? $params->subject : t('Contact message');
            $message['body'][] = !empty($params->message) ? Html::escape($params->message) : t('No message provided.');
            break;
    }
}

/**
 * テーマフックを実装します。
 *
 * @param $existing
 *   既存のテーマ情報の配列。
 * @param $type
 *   テーマまたはモジュールのタイプ。
 * @param $theme
 *   テーマの名前。
 * @param $path
 *   テーマまたはモジュールのパス。
 *
 * @return array
 *   テーマフックとそのテンプレートに関する情報の配列。
 */
function test_theme($existing, $type, $theme, $path) {
  return [
    'test_block_template' => [
      'variables' => [],
    ],
  ];
}